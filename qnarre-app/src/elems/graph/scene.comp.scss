:host {
  display: flex;
  font-size: 20px;
  height: 100%;
  width: 100%;
}

#svg {
  flex: 1;
  font-family: Roboto, sans-serif;
  height: 100%;
  overflow: hidden;
  width: 100%;
}

#hidden {
  position: fixed;
  top: 0px;
  visibility: hidden;
}

/* --- Node and annotation-node for MetaNode --- */

.meta > .nodeshape > rect,
.meta > .annotation-node > rect {
  cursor: pointer;
  fill: hsl(0, 0%, 70%);
}
.node.meta.highlighted > .nodeshape > rect,
.node.meta.highlighted > .annotation-node > rect {
  stroke-width: 2;
}
.annotation.meta.highlighted > .nodeshape > rect,
.annotation.meta.highlighted > .annotation-node > rect {
  stroke-width: 1;
}
.meta.selected > .nodeshape > rect,
.meta.selected > .annotation-node > rect {
  stroke: red;
  stroke-width: 2;
}
.node.meta.selected.expanded > .nodeshape > rect,
.node.meta.selected.expanded > .annotation-node > rect {
  stroke: red;
  stroke-width: 3;
}
.annotation.meta.selected > .nodeshape > rect,
.annotation.meta.selected > .annotation-node > rect {
  stroke: red;
  stroke-width: 2;
}
.node.meta.selected.expanded.highlighted > .nodeshape > rect,
.node.meta.selected.expanded.highlighted > .annotation-node > rect {
  stroke: red;
  stroke-width: 4;
}

.faded,
.faded rect,
.faded ellipse,
.faded path,
.faded use,
#rectHatch line,
#ellipseHatch line {
  color: #e0d4b3 !important;
  fill: white;
  stroke: #e0d4b3 !important;
}

.faded path {
  stroke-width: 1px !important;
}

.faded rect {
  fill: url(#rectHatch) !important;
}

.faded ellipse,
.faded use {
  fill: url(#ellipseHatch) !important;
}

.faded text {
  opacity: 0;
}

/* Rules used for input-tracing. */
.input-highlight > * > rect,
.input-highlight > * > ellipse,
.input-highlight > * > use {
  fill: white;
  stroke: #ff9800 !important;
}

/*  - Faded non-input styling */
.non-input > * > rect,
.non-input > * > ellipse,
.non-input > * > use,
/* For Const nodes. */
.non-input > * > .constant:not([class*="input-highlight"]) >
.annotation-node > ellipse,
/* For styling of annotation nodes of non-input nodes. */
.non-input > g > .annotation > .annotation-node > rect {
  stroke: #e0d4b3 !important;
  stroke-width: inherit;
  stroke-dasharray: inherit;
}

.non-input path {
  visibility: hidden;
}

.non-input > .nodeshape > rect,
.non-input > .annotation-node > rect,
/* For styling of annotation nodes of non-input nodes. */
.non-input > g > .annotation > .annotation-node > rect {
  fill: url(#rectHatch) !important;
}

.non-input ellipse,
.non-input use {
  fill: url(#ellipseHatch) !important;
}

.non-input > text {
  opacity: 0;
}

.non-input .annotation > .annotation-edge {
  marker-end: url(#annotation-arrowhead-faded);
}

.non-input .annotation > .annotation-edge.refline {
  marker-start: url(#ref-annotation-arrowhead-faded);
}

/* Input edges. */
.input-edge-highlight > text {
  fill: black !important;
}
.input-highlight > .in-annotations > .annotation > .annotation-edge,
.input-highlight-selected > .in-annotations > .annotation > .annotation-edge {
  stroke: #999 !important;
}

/* Non-input edges. */
.non-input-edge-highlight,
.non-input > g > .annotation > path,
/* Annotation styles (label and edges respectively). */
.non-input > g >
.annotation:not(.input-highlight):not(.input-highlight-selected) >
.annotation-label
/*.annotation-edge*/
 {
  visibility: hidden;
}

/* --- Op Node --- */

.op > .nodeshape > .nodecolortarget,
.op > .annotation-node > .nodecolortarget {
  cursor: pointer;
  fill: #fff;
  stroke: #ccc;
}

.op.selected > .nodeshape > .nodecolortarget,
.op.selected > .annotation-node > .nodecolortarget {
  stroke: red;
  stroke-width: 2;
}

.op.highlighted > .nodeshape > .nodecolortarget,
.op.highlighted > .annotation-node > .nodecolortarget {
  stroke-width: 2;
}

/* --- Series Node --- */

/* By default, don't show the series background <rect>. */
.series > .nodeshape > rect {
  fill: hsl(0, 0%, 70%);
  fill-opacity: 0;
  stroke-dasharray: 5, 5;
  stroke-opacity: 0;
  cursor: pointer;
}

/* Once expanded, show the series background <rect> and hide the <use>. */
.series.expanded > .nodeshape > rect {
  fill-opacity: 0.15;
  stroke: hsl(0, 0%, 70%);
  stroke-opacity: 1;
}
.series.expanded > .nodeshape > use {
  visibility: hidden;
}

/**
* TODO: Simplify this by applying a stable class name to all <g>
* elements that currently have either the nodeshape or annotation-node classes.
*/
.series > .nodeshape > use,
.series > .annotation-node > use {
  stroke: #ccc;
}
.series.highlighted > .nodeshape > use,
.series.highlighted > .annotation-node > use {
  stroke-width: 2;
}
.series.selected > .nodeshape > use,
.series.selected > .annotation-node > use {
  stroke: red;
  stroke-width: 2;
}

.series.selected > .nodeshape > rect {
  stroke: red;
  stroke-width: 2;
}

.annotation.series.selected > .annotation-node > use {
  stroke: red;
  stroke-width: 2;
}

/* --- Bridge Node --- */
.bridge > .nodeshape > rect {
  stroke: #f0f;
  opacity: 0.2;
  display: none;
}

/* --- Structural Elements --- */
.edge > path.edgeline.structural {
  stroke: #f0f;
  opacity: 0.2;
  display: none;
}

/* Reference Edge */
.edge > path.edgeline.referenceedge {
  stroke: #ffb74d;
  opacity: 1;
}

/* --- Series Nodes --- */

/* Hide the rect for a series' annotation. */
.series > .annotation-node > rect {
  display: none;
}

/* --- Node label --- */

.node > text.nodelabel {
  cursor: pointer;
  fill: #444;
}

.meta.expanded > text.nodelabel {
  font-size: 9px;
}

.series > text.nodelabel {
  font-size: 8px;
}

.op > text.nodelabel {
  font-size: 6px;
}

.bridge > text.nodelabel {
  display: none;
}

.node.meta.expanded > text.nodelabel {
  cursor: normal;
}

.annotation.meta.highlighted > text.annotation-label {
  fill: #50a3f7;
}

.annotation.meta.selected > text.annotation-label {
  fill: #4285f4;
}

/* --- Annotation --- */

/* only applied for annotations that are not summary or constant.
(.summary, .constant gets overridden below) */
.annotation > .annotation-node > * {
  stroke-width: 0.5;
  stroke-dasharray: 1, 1;
}

.annotation.summary > .annotation-node > *,
.annotation.constant > .annotation-node > * {
  stroke-width: 1;
  stroke-dasharray: none;
}

.annotation > .annotation-edge {
  fill: none;
  stroke: #aaa;
  stroke-width: 0.5;
  marker-end: url(#annotation-arrowhead);
}

.faded .annotation > .annotation-edge {
  marker-end: url(#annotation-arrowhead-faded);
}

.annotation > .annotation-edge.refline {
  marker-start: url(#ref-annotation-arrowhead);
}

.faded .annotation > .annotation-edge.refline {
  marker-start: url(#ref-annotation-arrowhead-faded);
}

.annotation > .annotation-control-edge {
  stroke-dasharray: 1, 1;
}

#annotation-arrowhead {
  fill: #aaa;
}

#annotation-arrowhead-faded {
  fill: #e0d4b3;
}

#ref-annotation-arrowhead {
  fill: #aaa;
}

#ref-annotation-arrowhead-faded {
  fill: #e0d4b3;
}

.annotation > .annotation-label {
  font-size: 5px;
  cursor: pointer;
}
.annotation > .annotation-label.annotation-ellipsis {
  cursor: default;
}

/* Hide annotations on expanded meta nodes since they're redundant. */
.expanded > .in-annotations,
.expanded > .out-annotations {
  display: none;
}

/* --- Annotation: Constant --- */

.constant > .annotation-node > ellipse {
  cursor: pointer;
  fill: white;
  stroke: #848484;
}

.constant.selected > .annotation-node > ellipse {
  fill: white;
  stroke: red;
}

.constant.highlighted > .annotation-node > ellipse {
  stroke-width: 1.5;
}

/* --- Annotation: Summary --- */

.summary > .annotation-node > ellipse {
  cursor: pointer;
  fill: #db4437;
  stroke: #db4437;
}

.summary.selected > .annotation-node > ellipse {
  fill: #a52714;
  stroke: #a52714;
}

.summary.highlighted > .annotation-node > ellipse {
  stroke-width: 1.5;
}

/* --- Edge --- */

.edge > path.edgeline {
  fill: none;
  stroke: #bbb;
  stroke-linecap: round;
  stroke-width: 0.75;
}

.edge .selectableedge {
  cursor: pointer;
}

.selectededge > path.edgeline {
  cursor: default;
  stroke: #f00;
}

.edge.selectededge text {
  fill: #000;
}

/* Labels showing tensor shapes on edges */
.edge > text {
  font-size: 3.5px;
  fill: #666;
}

.dataflow-arrowhead {
  fill: #bbb;
}

.reference-arrowhead {
  fill: #ffb74d;
}

.selected-arrowhead {
  fill: #f00;
}

.edge .control-dep {
  stroke-dasharray: 2, 2;
}

/* --- Group node expand/collapse button --- */

/* Hides expand/collapse buttons when a node isn't expanded or highlighted. Using
incredibly small opacity so that the bounding box of the <g> parent still takes
this container into account even when it isn't visible */
.node:not(.highlighted):not(.expanded) > .nodeshape > .buttoncontainer {
  opacity: 0.01;
}
.node.highlighted > .nodeshape > .buttoncontainer {
  cursor: pointer;
}
.buttoncircle {
  fill: #e7811d;
}
.buttoncircle:hover {
  fill: #b96717;
}
.expandbutton,
.collapsebutton {
  stroke: white;
}
/* Do not let the path elements in the button take pointer focus */
.node > .nodeshape > .buttoncontainer > .expandbutton,
.node > .nodeshape > .buttoncontainer > .collapsebutton {
  pointer-events: none;
}
/* Only show the expand button when a node is collapsed and only show the
collapse button when a node is expanded. */
.node.expanded > .nodeshape > .buttoncontainer > .expandbutton {
  display: none;
}
.node:not(.expanded) > .nodeshape > .buttoncontainer > .collapsebutton {
  display: none;
}

.health-pill-stats {
  font-size: 4px;
  text-anchor: middle;
}

.health-pill rect {
  filter: url(#health-pill-shadow);
  rx: 3;
  ry: 3;
}

.titleContainer {
  position: relative;
  top: 20px;
}

.title,
.auxTitle,
.functionLibraryTitle {
  position: absolute;
}

#minimap {
  position: absolute;
  right: 20px;
  bottom: 20px;
}

.context-menu {
  position: absolute;
  display: none;
  background-color: #e2e2e2;
  border-radius: 2px;
  font-size: 14px;
  min-width: 150px;
  border: 1px solid #d4d4d4;
}

.context-menu ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
  cursor: default;
}

.context-menu ul li {
  padding: 4px 16px;
}

.context-menu ul li:hover {
  background-color: #f3913e;
  color: white;
}
